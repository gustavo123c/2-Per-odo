//Gustavo Costa
//852702
#include <stdio.h> 
#include <stdlib.h>
#include <string.h>
#include <time.h>

#define TAM 10000// Aumenta o tamanho do vetor para capturar tempos mais precisos

void BubbleSort(int* v, int n) {
    int troca;
    for (int i = 0; i < n - 1; i++) {
        for (int j = 0; j < n - i - 1; j++) {
            if (v[j] > v[j + 1]) {
                troca = v[j];
                v[j] = v[j + 1];
                v[j + 1] = troca;
            }
        }
    }
}

void InsertionSort(int* v, int n) {
    int i, j, chave;
    for (i = 1; i < n; i++) {
        chave = v[i];
        j = i - 1;
        while (j >= 0 && v[j] > chave) {
            v[j + 1] = v[j];
            j--;
        }
        v[j + 1] = chave;
    }
}

void SelectionSort(int* v, int n) {
    int i, j, min, troca;
    for (i = 0; i < n - 1; i++) {
        min = i;
        for (j = i + 1; j < n; j++) {
            if (v[j] < v[min]) {
                min = j;
            }
        }
        troca = v[i];
        v[i] = v[min];
        v[min] = troca;
    }
}

void preencherArrayAleatorio(int* v, int n) {
    srand(time(NULL));
    for (int i = 0; i < n; i++) {
        v[i] = rand() % 1000;
    }
}

void preencherArrayCrescente(int* v, int n) {
    for (int i = 0; i < n; i++) {
        v[i] = i;
    }
}

void preencherArrayDecrescente(int* v, int n) {
    for (int i = 0; i < n; i++) {
        v[i] = n - i - 1;
    }
}

double medidaTempo(void (*sortFunc)(int*, int), int* v, int n) {
    int* vTemp = (int*)malloc(n * sizeof(int));
    if (vTemp == NULL) {
        printf("Falha na alocacao de memoria!\n");
        exit(1);
    }
    memcpy(vTemp, v, n * sizeof(int));

    clock_t inicio, fim;
    inicio = clock();
    sortFunc(vTemp, n);
    fim = clock();

    free(vTemp);
    // Converte o tempo de segundos para milissegundos
    return ((double)(fim - inicio) / CLOCKS_PER_SEC) * 1000;
}

int main() {
    int* v = (int*)malloc(TAM * sizeof(int));
    if (v == NULL) {
        printf("Falha na alocacao de memoria!\n");
        return 1;
    }

    double timeBubble, timeInsertion, timeSelection;

    // Vetor desordenado
    printf("Tempo de execucao para o vetor desordenado:\n");
    preencherArrayAleatorio(v, TAM);

    timeBubble = medidaTempo(BubbleSort, v, TAM);
    timeInsertion = medidaTempo(InsertionSort, v, TAM);
    timeSelection = medidaTempo(SelectionSort, v, TAM);

    printf("\nBubbleSort: %.6f ms\n", timeBubble);
    printf("InsertionSort: %.6f ms\n", timeInsertion);
    printf("SelectionSort: %.6f ms\n", timeSelection);

    // Vetor ordenado crescente
    printf("\nTempo de execucao para o vetor ordenado (crescente):\n");
    preencherArrayCrescente(v, TAM);

    timeBubble = medidaTempo(BubbleSort, v, TAM);
    timeInsertion = medidaTempo(InsertionSort, v, TAM);
    timeSelection = medidaTempo(SelectionSort, v, TAM);

    printf("\nBubbleSort: %.6f ms\n", timeBubble);
    printf("InsertionSort: %.6f ms\n", timeInsertion);
    printf("SelectionSort: %.6f ms\n", timeSelection);

    // Vetor ordenado decrescente
    printf("\nTempo de execucao para o vetor ordenado (decrescente):\n");
    preencherArrayDecrescente(v, TAM);

    timeBubble = medidaTempo(BubbleSort, v, TAM);
    timeInsertion = medidaTempo(InsertionSort, v, TAM);
    timeSelection = medidaTempo(SelectionSort, v, TAM);

    printf("\nBubbleSort: %.6f ms\n", timeBubble);
    printf("InsertionSort: %.6f ms\n", timeInsertion);
    printf("SelectionSort: %.6f ms\n", timeSelection);

    free(v);
    return 0;
}

// Marcio o insertionSort ordem (crescente) não estava dando certo, então eu usei um codigo por fora para conseguir achar os segundos dele!
// Esse seria o código
//#include <stdio.h>
//#include <stdlib.h>
//#include <time.h>
//#define TAM 10000
//
//void InsertionSort(int* v) {
//    int i, j, marcada;
//    for (i = 1; i < TAM; i++) {
//        marcada = v[i];
//        j = i - 1;
//        while (j >= 0 && v[j] > marcada) {
//            v[j + 1] = v[j];
//           j--;
//        }
//        v[j + 1] = marcada;
//    }
//}

//int main() {
//    int *v = (int*) malloc(TAM * sizeof(int));

//    if (v == NULL) {
//        printf("Falha na alocação de memória!\n");
//        return 1;
//    }

    // Inicializa o array com números aleatórios
//    srand(time(NULL));
//   for (int i = 0; i < TAM; i++) {
//        v[i] = rand() % 1000;
//    }

    // Medição do tempo de execução do InsertionSort
//    clock_t inicio = clock();
//    InsertionSort(v);
//    clock_t fim = clock();

    // Calcula e exibe o tempo gasto em segundos
//    printf("\nTempo gasto na ordenação com InsertionSort: %f segundos.\n\n", (float)(fim - inicio) / CLOCKS_PER_SEC);

//   free(v);  // Libera a memória alocada
//    return 0;
//}
