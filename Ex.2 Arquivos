#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define MAX_FILMES 300
#define MAX_FAVORITOS 20

typedef struct {
    int id;
    char titulo[100];
    char descricao[300];
} Filme;

typedef struct {
    int id;
    char nome[50];
    int filmesFavoritos[MAX_FAVORITOS];
    int qtdFavoritos;
} Usuario;

// Funções auxiliares para manipulação de filmes
void escreverFilme(Filme filme, FILE *arquivo) {
    fwrite(&filme, sizeof(Filme), 1, arquivo);
}

Filme lerFilme(FILE *arquivo) {
    Filme filme;
    fread(&filme, sizeof(Filme), 1, arquivo);
    return filme;
}

void atualizarFilme(Filme filmeNovo, const char *nomeArquivo) {
    FILE *arquivo = fopen(nomeArquivo, "r+b");
    if (!arquivo) {
        printf("Erro ao abrir o arquivo de filmes.\n");
        return;
    }

    Filme filme;
    while (fread(&filme, sizeof(Filme), 1, arquivo)) {
        if (filme.id == filmeNovo.id) {
            fseek(arquivo, -sizeof(Filme), SEEK_CUR);
            fwrite(&filmeNovo, sizeof(Filme), 1, arquivo);
            break;
        }
    }

    fclose(arquivo);
}

void removerFilme(int id, const char *nomeArquivo) {
    FILE *arquivo = fopen(nomeArquivo, "rb");
    if (!arquivo) {
        printf("Erro ao abrir o arquivo de filmes.\n");
        return;
    }

    FILE *temp = fopen("temp.bin", "wb");
    if (!temp) {
        printf("Erro ao criar arquivo temporário.\n");
        fclose(arquivo);
        return;
    }

    Filme filme;
    int encontrado = 0;

    while (fread(&filme, sizeof(Filme), 1, arquivo)) {
        if (filme.id != id) {
            fwrite(&filme, sizeof(Filme), 1, temp);
        } else {
            encontrado = 1;
        }
    }

    fclose(arquivo);
    fclose(temp);

    if (!encontrado) {
        printf("Filme com ID %d nao encontrado.\n", id);
        remove("temp.bin");
        return;
    }

    if (remove(nomeArquivo) != 0 || rename("temp.bin", nomeArquivo) != 0) {
        printf("Erro ao atualizar o arquivo de filmes.\n");
        return;
    }

    printf("Filme com ID %d removido com sucesso!\n", id);
}

// Funções auxiliares para manipulação de usuarios
void escreverUsuario(Usuario usuario, FILE *arquivo) {
    fwrite(&usuario, sizeof(Usuario), 1, arquivo);
}

Usuario lerUsuario(FILE *arquivo) {
    Usuario usuario;
    fread(&usuario, sizeof(Usuario), 1, arquivo);
    return usuario;
}

void atualizarUsuario(Usuario usuarioNovo, const char *nomeArquivoUsuarios) {
    FILE *arquivo = fopen(nomeArquivoUsuarios, "r+b");
    if (!arquivo) {
        printf("Erro ao abrir o arquivo de usuarios.\n");
        return;
    }

    Usuario usuario;
    while (fread(&usuario, sizeof(Usuario), 1, arquivo)) {
        if (usuario.id == usuarioNovo.id) {
            fseek(arquivo, -sizeof(Usuario), SEEK_CUR);
            fwrite(&usuarioNovo, sizeof(Usuario), 1, arquivo);
            break;
        }
    }

    fclose(arquivo);
}

void removerUsuario(int idUsuario, const char *nomeArquivoUsuarios) {
    FILE *arquivoUsuarios = fopen(nomeArquivoUsuarios, "r+b");
    FILE *tempFile = fopen("temp_usuarios.bin", "wb");
    if (!arquivoUsuarios || !tempFile) {
        printf("Erro ao abrir os arquivos.\n");
        return;
    }

    Usuario usuario;
    int usuarioRemovido = 0;

    // Copiar todos os usuários para o arquivo temporário, exceto o removido
    while (fread(&usuario, sizeof(Usuario), 1, arquivoUsuarios)) {
        if (usuario.id != idUsuario) {
            fwrite(&usuario, sizeof(Usuario), 1, tempFile);
        } else {
            usuarioRemovido = 1;
        }
    }

    if (!usuarioRemovido) {
        printf("Usuario com ID %d nao encontrado.\n", idUsuario);
    } else {
        printf("Usuario com ID %d removido com sucesso.\n", idUsuario);
    }

    fclose(arquivoUsuarios);
    fclose(tempFile);

    // Substituir o arquivo original pelo temporário
    remove(nomeArquivoUsuarios);
    rename("temp_usuarios.bin", nomeArquivoUsuarios);
}

// Funções para listar filmes e usuarios
void listarFilmes(const char *nomeArquivo) {
    FILE *arquivo = fopen(nomeArquivo, "rb");
    if (!arquivo) {
        printf("Erro ao abrir o arquivo de filmes.\n");
        return;
    }

    Filme filme;
    printf("Lista de Filmes:\n");
    while (fread(&filme, sizeof(Filme), 1, arquivo)) {
        printf("ID: %d, Titulo: %s, Descricao: %s\n", filme.id, filme.titulo, filme.descricao);
    }

    fclose(arquivo);
}

void listarUsuarios(const char *nomeArquivoUsuarios, const char *nomeArquivoFilmes) {
    FILE *arquivoUsuarios = fopen(nomeArquivoUsuarios, "rb");
    FILE *arquivoFilmes = fopen(nomeArquivoFilmes, "rb");
    if (!arquivoUsuarios || !arquivoFilmes) {
        printf("Erro ao abrir os arquivos de usuarios ou filmes.\n");
        return;
    }

    Usuario usuario;
    Filme filme;
    printf("Lista de Usuarios:\n");

    while (fread(&usuario, sizeof(Usuario), 1, arquivoUsuarios)) {
        printf("ID: %d, Nome: %s\n", usuario.id, usuario.nome);
        printf("Filmes Favoritos:\n");

        for (int i = 0; i < usuario.qtdFavoritos; i++) {
            rewind(arquivoFilmes);  // Volta ao início do arquivo de filmes
            while (fread(&filme, sizeof(Filme), 1, arquivoFilmes)) {
                if (filme.id == usuario.filmesFavoritos[i]) {
                    printf("  - ID: %d, Titulo: %s\n", filme.id, filme.titulo);
                    break;
                }
            }
        }

        printf("\n");
    }

    fclose(arquivoUsuarios);
    fclose(arquivoFilmes);
}

// Função para adicionar filme aos favoritos do usuario
void adicionarFilmeFavorito(int idUsuario, int idFilme, const char *nomeArquivoUsuarios, const char *nomeArquivoFilmes) {
    FILE *arquivoUsuarios = fopen(nomeArquivoUsuarios, "r+b");
    FILE *arquivoFilmes = fopen(nomeArquivoFilmes, "rb");
    if (!arquivoUsuarios || !arquivoFilmes) {
        printf("Erro ao abrir os arquivos de usuarios ou filmes.\n");
        return;
    }

    Usuario usuario;
    Filme filme;
    int usuarioEncontrado = 0;
    int filmeValido = 0;

    // Verificar se o usuario existe
    while (fread(&usuario, sizeof(Usuario), 1, arquivoUsuarios)) {
        if (usuario.id == idUsuario) {
            usuarioEncontrado = 1;
            break;
        }
    }

    // Verificar se o filme existe
    rewind(arquivoFilmes);
    while (fread(&filme, sizeof(Filme), 1, arquivoFilmes)) {
        if (filme.id == idFilme) {
            filmeValido = 1;
            break;
        }
    }

    fclose(arquivoFilmes);

    if (!usuarioEncontrado) {
        printf("Usuario com ID %d nao encontrado.\n", idUsuario);
        fclose(arquivoUsuarios);
        return;
    }

    if (!filmeValido) {
        printf("Filme com ID %d nao encontrado.\n", idFilme);
        fclose(arquivoUsuarios);
        return;
    }

    // Adicionar o filme aos favoritos do usuario
    fseek(arquivoUsuarios, -sizeof(Usuario), SEEK_CUR);
    usuario.filmesFavoritos[usuario.qtdFavoritos] = idFilme;
    usuario.qtdFavoritos++;

    fseek(arquivoUsuarios, -sizeof(Usuario), SEEK_CUR);
    fwrite(&usuario, sizeof(Usuario), 1, arquivoUsuarios);

    printf("Filme com ID %d adicionado aos favoritos do usuario %d.\n", idFilme, idUsuario);
    fclose(arquivoUsuarios);
}

// Menu principal
void exibirMenu() {
    printf("\n--- Menu ---\n");
    printf("1. Cadastrar Filme\n");
    printf("2. Cadastrar Usuario\n");
    printf("3. Listar Filmes\n");
    printf("4. Listar Usuarios\n");
    printf("5. Atualizar Filme\n");
    printf("6. Atualizar Usuario\n");
    printf("7. Remover Filme\n");
    printf("8. Remover Usuario\n");
    printf("9. Adicionar Filme aos Favoritos\n");
    printf("10. Sair\n");
}

int main() {
    const char *nomeArquivoFilmes = "filmes.bin";
    const char *nomeArquivoUsuarios = "usuarios.bin";

    int opcao;
    while (1) {
        exibirMenu();
        printf("Escolha uma opcao: ");
        scanf("%d", &opcao);
        getchar();  // Limpar o buffer do teclado

        switch (opcao) {
            case 1: {
                Filme filme;
                printf("Digite o ID do filme: ");
                scanf("%d", &filme.id);
                getchar();
                printf("Digite o titulo do filme: ");
                fgets(filme.titulo, sizeof(filme.titulo), stdin);
                filme.titulo[strcspn(filme.titulo, "\n")] = '\0'; // Remove newline
                printf("Digite a descricao do filme: ");
                fgets(filme.descricao, sizeof(filme.descricao), stdin);
                filme.descricao[strcspn(filme.descricao, "\n")] = '\0'; // Remove newline

                FILE *arquivoFilmes = fopen(nomeArquivoFilmes, "ab");
                if (arquivoFilmes) {
                    escreverFilme(filme, arquivoFilmes);
                    fclose(arquivoFilmes);
                    printf("Filme cadastrado com sucesso!\n");
                } else {
                    printf("Erro ao abrir o arquivo de filmes.\n");
                }
                break;
            }
            case 2: {
                Usuario usuario;
                printf("Digite o ID do usuario: ");
                scanf("%d", &usuario.id);
                getchar();
                printf("Digite o nome do usuario: ");
                fgets(usuario.nome, sizeof(usuario.nome), stdin);
                usuario.nome[strcspn(usuario.nome, "\n")] = '\0'; // Remove newline
                usuario.qtdFavoritos = 0;

                FILE *arquivoUsuarios = fopen(nomeArquivoUsuarios, "ab");
                if (arquivoUsuarios) {
                    escreverUsuario(usuario, arquivoUsuarios);
                    fclose(arquivoUsuarios);
                    printf("Usuario cadastrado com sucesso!\n");
                } else {
                    printf("Erro ao abrir o arquivo de usuarios.\n");
                }
                break;
            }
            case 3:
                listarFilmes(nomeArquivoFilmes);
                break;
            case 4:
                listarUsuarios(nomeArquivoUsuarios, nomeArquivoFilmes);
                break;
            case 5: {
                Filme filme;
                printf("Digite o ID do filme para atualizar: ");
                scanf("%d", &filme.id);
                getchar();
                printf("Digite o novo titulo do filme: ");
                fgets(filme.titulo, sizeof(filme.titulo), stdin);
                filme.titulo[strcspn(filme.titulo, "\n")] = '\0'; // Remove newline
                printf("Digite a nova descricao do filme: ");
                fgets(filme.descricao, sizeof(filme.descricao), stdin);
                filme.descricao[strcspn(filme.descricao, "\n")] = '\0'; // Remove newline
                atualizarFilme(filme, nomeArquivoFilmes);
                break;
            }
            case 6: {
                Usuario usuario;
                printf("Digite o ID do usuario para atualizar: ");
                scanf("%d", &usuario.id);
                getchar();
                printf("Digite o novo nome do usuario: ");
                fgets(usuario.nome, sizeof(usuario.nome), stdin);
                usuario.nome[strcspn(usuario.nome, "\n")] = '\0'; // Remove newline
                atualizarUsuario(usuario, nomeArquivoUsuarios);
                break;
            }
            case 7: {
                int idFilme;
                printf("Digite o ID do filme para remover: ");
                scanf("%d", &idFilme);
                removerFilme(idFilme, nomeArquivoFilmes);
                break;
            }
            case 8: {
                int idUsuario;
                printf("Digite o ID do usuario para remover: ");
                scanf("%d", &idUsuario);
                removerUsuario(idUsuario, nomeArquivoUsuarios);
                break;
            }
            case 9: {
                int idUsuario, idFilme;
                printf("Digite o ID do usuario: ");
                scanf("%d", &idUsuario);
                printf("Digite o ID do filme para adicionar aos favoritos: ");
                scanf("%d", &idFilme);
                adicionarFilmeFavorito(idUsuario, idFilme, nomeArquivoUsuarios, nomeArquivoFilmes);
                break;
            }
            case 10:
                printf("Saindo...\n");
                return 0;
            default:
                printf("Opcao invalida!\n");
        }
    }

    return 0;
}
